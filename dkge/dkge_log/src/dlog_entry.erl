%% -*- coding: utf-8 -*-
%%%-------------------------------------------------------------------
%%% @doc
%%% dlog api
%%% This file is generated by script,can not edit it.
%%% @end
%%%-------------------------------------------------------------------

-module(dlog_entry).

-export([
    debug_msg/5,
    info_msg/5,
    warning_msg/5,
    error_msg/5,
    critical_msg/5,
    get/0
    ]).

get() -> 4.

get_pname(PID) ->
    case process_info(PID, registered_name) of [] -> []; {_, Name} -> Name end.
debug_msg(_,_,_,_,_) -> ok.

info_msg(ServerName, Module, Line, Format, Args) ->
    PID = self(),
    notify(info_msg,"I(~p:~p:~p:~p:~p) : ", [ServerName, get_pname(PID), PID, Module, Line], Format, Args).

warning_msg(ServerName, Module, Line, Format, Args) ->
    PID = self(),
    notify(warning,"W(~p:~p:~p:~p:~p) : ", [ServerName, get_pname(PID), PID, Module, Line], Format, Args).

error_msg(ServerName, Module, Line, Format, Args) ->
    PID = self(),
    notify(error,"E(~p:~p:~p:~p:~p) : ", [ServerName, get_pname(PID), PID, Module, Line], Format, Args).

critical_msg(ServerName, Module, Line, Format, Args) ->
    PID = self(),
    notify(critical,"C(~p:~p:~p:~p:~p) : ", [ServerName, get_pname(PID), PID, Module, Line], Format, Args).


%% Distribute the message to the Erlang error logger
notify(Type, HeaderFmt, HeaderArgs, Format, Args) ->
    LoggerMsg = {Type,group_leader(),{self(),HeaderFmt,HeaderArgs,Format,Args}},
    dlog_logger:notify(LoggerMsg).

