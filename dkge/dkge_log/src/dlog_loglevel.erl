%%%----------------------------------------------------------------------
%%% File    : dlog_loglevel.erl
%%%----------------------------------------------------------------------

-module(dlog_loglevel).

-export([set/1, get/0]).
-define(LOG_ENTRY_MODULE, "dlog_entry").

-export([dlog_entry_src/1]).

%% Error levels:
-define(LOG_LEVELS,[
    {1, "Critical"},
    {2, "Error"},
    {3, "Warning"},
    {4, "Info"},
    {5, "Debug"}
]).

-spec get() -> {pos_integer(), string()}.
%% @doc 返回当前日志等级和等级名称标记
get() ->
    Level = dlog_entry:get(),
    case lists:keysearch(Level, 1, ?LOG_LEVELS) of
        {value, Result} -> Result;
        _ -> erlang:error({no_such_loglevel, Level})
    end.

-spec set(LogLevel) -> {module, dlog_entry} | ok when
      LogLevel :: 1..5.
%% @doc 设置日志级别
set(Loglevel) when is_integer(Loglevel) andalso Loglevel >=1 andalso Loglevel =< 5 ->
    try
        {Mod,Code} = dynamic_compile:from_string(dlog_entry_src(Loglevel)),
        code:load_binary(Mod, ?LOG_ENTRY_MODULE ++ ".erl", Code)
    catch
        Type:Error -> io:format("Error compiling logger (~p): ~p~n", [Type, Error])
    end.


%% --------------------------------------------------------------
-spec dlog_entry_src(LogLevel) -> string() when
      LogLevel :: pos_integer().
%% @doc 构造dlog_entry.erl文件
%% Code of the common logger, dynamically compiled and loaded
%% This allows to dynamically change log level while keeping a
%% very efficient code.
%% @end
dlog_entry_src(Loglevel) ->

    Head = "%% -*- coding: utf-8 -*-
%%%-------------------------------------------------------------------
%%% @doc
%%% dlog api
%%% This file is generated by script,can not edit it.
%%% @end
%%%-------------------------------------------------------------------

-module(dlog_entry).

-export([
    debug_msg/5,
    info_msg/5,
    warning_msg/5,
    error_msg/5,
    critical_msg/5,
    get/0
    ]).

get() -> "++ integer_to_list(Loglevel) ++".

get_pname(PID) ->
    case process_info(PID, registered_name) of [] -> []; {_, Name} -> Name end.
",

    case Loglevel >= 5 of
        true ->
            DebugFunc = "
debug_msg(ServerName, Module, Line, Format, Args) ->
    notify(debug,\"D(~p:~p:~p:~p:~p) : \", [ServerName, get_pname(self()), self(), Module, Line], Format, Args).
";
        _ ->
            DebugFunc = "debug_msg(_,_,_,_,_) -> ok.\n"
    end,

    case Loglevel >= 4 of
        true ->
            InfoFunc = "
info_msg(ServerName, Module, Line, Format, Args) ->
    PID = self(),
    notify(info_msg,\"I(~p:~p:~p:~p:~p) : \", [ServerName, get_pname(PID), PID, Module, Line], Format, Args).
";
        _ ->
            InfoFunc = "info_msg(_,_,_,_,_) -> ok.\n"
    end,

    case Loglevel >= 3 of
        true ->
            WarningFunc = "
warning_msg(ServerName, Module, Line, Format, Args) ->
    PID = self(),
    notify(warning,\"W(~p:~p:~p:~p:~p) : \", [ServerName, get_pname(PID), PID, Module, Line], Format, Args).
";
        _ ->
            WarningFunc = "warning_msg(_,_,_,_,_) -> ok.\n"
    end,

    case Loglevel >= 2 of
        true ->
            ErrorFunc = "
error_msg(ServerName, Module, Line, Format, Args) ->
    PID = self(),
    notify(error,\"E(~p:~p:~p:~p:~p) : \", [ServerName, get_pname(PID), PID, Module, Line], Format, Args).
";
        _ ->
            ErrorFunc = "error_msg(_,_,_,_,_) -> ok.\n"
    end,

    case Loglevel >= 1 of
        true ->
            CriticalFunc = "
critical_msg(ServerName, Module, Line, Format, Args) ->
    PID = self(),
    notify(critical,\"C(~p:~p:~p:~p:~p) : \", [ServerName, get_pname(PID), PID, Module, Line], Format, Args).
";
        _ ->
            CriticalFunc = "critical_msg(_,_,_,_,_) -> ok.\n"
    end,


    NotifyFunc = "

%% Distribute the message to the Erlang error logger
notify(Type, HeaderFmt, HeaderArgs, Format, Args) ->
    LoggerMsg = {Type,group_leader(),{self(),HeaderFmt,HeaderArgs,Format,Args}},
    dlog_logger:notify(LoggerMsg).
",
    lists:concat([Head,DebugFunc,InfoFunc,WarningFunc,ErrorFunc,CriticalFunc,NotifyFunc]).

